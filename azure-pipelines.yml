trigger:
  branches:
    include:
      - main  # Adjust as needed

jobs:
- job: Android_Testing
  pool:
    vmImage: 'macos-latest'

  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  # Install Java 17 (Required for avdmanager and emulator)
  - script: |
      echo "Installing Java 17..."
      brew tap homebrew/cask-versions
      brew install --cask temurin17
      export JAVA_HOME=$(/usr/libexec/java_home -v 17)
      echo "##vso[task.prependpath]$JAVA_HOME/bin"
      echo "JAVA_HOME is set to: $JAVA_HOME"
      java -version
    displayName: 'Install and Set Java 17'

  # Install Flutter
  - script: |
      git clone https://github.com/flutter/flutter.git -b stable
      echo "##vso[task.prependpath]$PWD/flutter/bin"
    displayName: 'Install Flutter'

  # Install Android Emulator and System Images
  - script: |
      echo "Checking Android SDK location..."
      export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
      export ANDROID_HOME=$ANDROID_SDK_ROOT
      export CMDLINE_TOOLS=$ANDROID_HOME/cmdline-tools/latest/bin
      echo "ANDROID_SDK_ROOT is set to: $ANDROID_SDK_ROOT"

      # Ensure sdkmanager is installed
      if [ ! -f "$CMDLINE_TOOLS/sdkmanager" ]; then
          echo "⚠️  sdkmanager not found! Installing Android SDK Command-line tools..."
          mkdir -p $ANDROID_HOME/cmdline-tools
          curl -o commandlinetools-mac.zip https://dl.google.com/android/repository/commandlinetools-mac-11076708_latest.zip
          unzip -q commandlinetools-mac.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm commandlinetools-mac.zip
          echo "✅ Android SDK Command-line tools installed."
      fi

      # Ensure sdkmanager is executable
      chmod +x $CMDLINE_TOOLS/sdkmanager

      # Accept all SDK licenses
      yes | $CMDLINE_TOOLS/sdkmanager --licenses

      # Install Android Emulator and System Images (x86_64)
      echo "Installing Android Emulator and System Images..."
      $CMDLINE_TOOLS/sdkmanager --install "emulator" "system-images;android-33;google_apis;x86_64"

      echo "✅ Android Emulator and System Images installed successfully!"
    displayName: 'Install Android Emulator and System Images'

  # Create Android Emulator
  - script: |
      echo "Creating Android Emulator..."
      
      # Verify available system images
      echo "Available System Images:"
      $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images"

      # Create AVD with x86_64 system image
      echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator -k "system-images;android-33;google_apis;x86_64" -d pixel_4

      # Verify AVD creation
      echo "Listing available AVDs..."
      $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
    displayName: 'Create Android Emulator'

  # Start Android Emulator (with ADB fixes)
  - script: |
      echo "🔄 Restarting ADB server..."
      adb kill-server
      adb start-server

      # Start Emulator with software rendering and snapshot
      if $ANDROID_HOME/emulator/emulator -list-avds | grep -q "test_emulator"; then
          echo "✅ Emulator found, starting it..."
          nohup $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window -snapshot default_boot -gpu swiftshader_indirect -timezone "America/New_York" -no-accel -verbose &

          sleep 5  # Allow emulator to initialize

          # Wait for emulator to appear in `adb devices`
          TIMEOUT=600
          ELAPSED=0
          while ! adb devices | grep -w emulator; do
              echo "⌛ Waiting for emulator to appear in adb devices..."
              sleep 10
              ELAPSED=$((ELAPSED + 10))
              if [[ $ELAPSED -ge $TIMEOUT ]]; then
                  echo "❌ Emulator failed to start within timeout ($TIMEOUT seconds)"
                  exit 1
              fi
          done

          echo "✅ Emulator detected in adb devices!"
          
          # Handle offline emulator state
          while adb devices | grep -w "offline"; do
              echo "⚠️ Emulator is offline. Trying to reconnect..."
              adb reconnect
              sleep 5
          done

          echo "✅ Emulator is online!"

          # Wait for boot completion
          TIMEOUT=1800  # 30 minutes
          ELAPSED=0
          while [[ $(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r') != "1" ]]; do
              echo "⌛ Waiting for emulator to fully boot..."
              sleep 10
              ELAPSED=$((ELAPSED + 10))
              if [[ $ELAPSED -ge $TIMEOUT ]]; then
                  echo "❌ Emulator failed to boot within timeout ($TIMEOUT seconds)"
                  adb shell logcat -d > emulator-logcat.txt  # Capture logs for debugging
                  exit 1
              fi
          done

          echo "✅ Emulator is fully booted!"
          adb devices
      else
          echo "❌ Emulator 'test_emulator' not found! Aborting."
          exit 1
      fi
    displayName: 'Start Android Emulator'

  # Run Android Integration Tests
  - script: |
      echo "Restarting ADB before tests..."
      adb kill-server
      adb start-server

      # Ensure emulator is running before testing
      if ! adb devices | grep -w emulator; then
          echo "❌ Emulator is missing! Restarting..."
          nohup $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window -no-snapshot-load -gpu swiftshader_indirect -verbose &
          sleep 30
      fi

      echo "✅ Running Flutter integration tests..."
      cd myflutterapp
      flutter test integration_test/ --machine > integration-test-results.json
    displayName: 'Run Android Integration Tests'

  # Convert Test Results to JUnit Format
  - script: |
      dart pub global activate junitreport
      cat myflutterapp/test-results.json | tojunit > myflutterapp/test-results.xml
      cat myflutterapp/integration-test-results.json | tojunit > myflutterapp/integration-test-results.xml
    displayName: 'Convert Test Results to JUnit Format'

  # Publish Android Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testResultsFormat: 'JUnit'
      mergeTestResults: true
    displayName: 'Publish Android Test Results'

  # Upload Android Test Results Artifact
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'myflutterapp/test-results.xml'
      artifactName: 'android-test-results'
    displayName: 'Upload Android Test Results Artifact'

- job: iOS_Testing
  pool:
    vmImage: 'macOS-latest'
  dependsOn: Android_Testing

  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  # Install Flutter
  - script: |
      git clone https://github.com/flutter/flutter.git -b stable
      echo "##vso[task.prependpath]$PWD/flutter/bin"
    displayName: 'Install Flutter'

  # Install Flutter dependencies
  - script: |
      cd myflutterapp
      flutter pub get
    displayName: 'Install Dependencies'

  # Run Flutter Analyze
  - script: |
      cd myflutterapp
      flutter analyze
    displayName: 'Run Flutter Analyze'

  # Run Widget Tests
  - script: |
      cd myflutterapp
      flutter test test/ --machine > test-results.json
    displayName: 'Run Widget Tests'

  # Start iOS Simulator
  - script: |
      echo "Starting iOS Simulator..."
      xcrun simctl boot "iPhone 14"
      xcrun simctl list devices
    displayName: 'Start iOS Simulator'

  # Run iOS Integration Tests
  - script: |
      cd myflutterapp
      flutter test integration_test/ --machine > integration-test-results.json
    displayName: 'Run iOS Integration Tests'

  # Convert Test Results to JUnit Format
  - script: |
      dart pub global activate junitreport
      cat myflutterapp/test-results.json | tojunit > myflutterapp/test-results.xml
      cat myflutterapp/integration-test-results.json | tojunit > myflutterapp/integration-test-results.xml
    displayName: 'Convert Test Results to JUnit Format'

  # Publish iOS Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testResultsFormat: 'JUnit'
      mergeTestResults: true
    displayName: 'Publish iOS Test Results'

  # Upload iOS Test Results Artifact
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'myflutterapp/test-results.xml'
      artifactName: 'ios-test-results'
    displayName: 'Upload iOS Test Results Artifact'
trigger:
  branches:
    include:
      - main  # Adjust as needed

jobs:
- job: Android_Testing
  pool:
    vmImage: 'macos-latest'

  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  # Install Java 17
  - script: |
      echo "Installing Java 17..."
      brew tap homebrew/cask-versions
      brew install --cask temurin17
      export JAVA_HOME=$(/usr/libexec/java_home -v 17)
      echo "##vso[task.prependpath]$JAVA_HOME/bin"
      echo "JAVA_HOME is set to: $JAVA_HOME"
      java -version
    displayName: 'Install Java 17'

  # Install Flutter
  - script: |
      git clone https://github.com/flutter/flutter.git -b stable
      echo "##vso[task.prependpath]$PWD/flutter/bin"
    displayName: 'Install Flutter'

  # Install Android Emulator and System Images
  - script: |
      echo "🔹 Setting up Java 17..."
      export JAVA_HOME=$(/usr/libexec/java_home -v 17)
      echo "##vso[task.prependpath]$JAVA_HOME/bin"
      java -version  # Verify Java version

      echo "🔹 Installing JAXB dependencies..."
      mkdir -p $HOME/jaxb-libs
      curl -L -o $HOME/jaxb-libs/jaxb-api.jar https://repo1.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.jar
      curl -L -o $HOME/jaxb-libs/jaxb-core.jar https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar
      curl -L -o $HOME/jaxb-libs/jaxb-impl.jar https://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.1/jaxb-impl-2.3.1.jar
      curl -L -o $HOME/jaxb-libs/activation.jar https://repo1.maven.org/maven2/com/sun/activation/jakarta.activation/1.2.2/jakarta.activation-1.2.2.jar
      echo "✅ JAXB dependencies installed."

      echo "🔹 Checking Android SDK location..."
      export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
      export ANDROID_HOME=$ANDROID_SDK_ROOT
      export CMDLINE_TOOLS=$ANDROID_HOME/cmdline-tools/latest/bin
      echo "ANDROID_SDK_ROOT is set to: $ANDROID_SDK_ROOT"

      # Ensure sdkmanager is installed
      if [ ! -f "$CMDLINE_TOOLS/sdkmanager" ]; then
          echo "⚠️ sdkmanager not found! Installing SDK Command-line tools..."
          mkdir -p $ANDROID_HOME/cmdline-tools
          curl -o commandlinetools-mac.zip https://dl.google.com/android/repository/commandlinetools-mac-11076708_latest.zip
          unzip -q commandlinetools-mac.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm commandlinetools-mac.zip
          echo "✅ Android SDK Command-line tools installed."
      fi

      # Ensure sdkmanager is executable
      chmod +x $CMDLINE_TOOLS/sdkmanager

      # Accept all SDK licenses
      yes | $CMDLINE_TOOLS/sdkmanager --licenses

      # Install Android Emulator and System Images
      echo "🔹 Installing Android Emulator and System Images..."
      $CMDLINE_TOOLS/sdkmanager --install "emulator" "system-images;android-30;google_apis;x86"
      
      echo "✅ Android Emulator and System Images installed successfully!"
    displayName: 'Install Android Emulator and System Images'

  # Verify Flutter installation
  - script: flutter doctor
    displayName: 'Run Flutter Doctor'

  # Install Flutter dependencies
  - script: |
      cd myflutterapp
      flutter pub get
    displayName: 'Install Dependencies'

  # Run Flutter Analyze
  - script: |
      cd myflutterapp
      flutter analyze
    displayName: 'Run Flutter Analyze'

  # Run Widget Tests
  - script: |
      cd myflutterapp
      flutter test test/ --machine > test-results.json
    displayName: 'Run Widget Tests'

  # Create and start Android Emulator
  - script: |
      echo "Creating Android Emulator..."
      export JAVA_HOME=$(/usr/libexec/java_home -v 17)
      echo "##vso[task.prependpath]$JAVA_HOME/bin"
      echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_emulator -k "system-images;android-30;google_apis;x86" -d pixel
      echo "Starting Android Emulator..."
      $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window -no-snapshot -no-metrics &
      adb wait-for-device
      adb devices
    displayName: 'Start Android Emulator'

  # Run Android Integration Tests
  - script: |
      cd myflutterapp
      flutter test integration_test/ --machine > integration-test-results.json
    displayName: 'Run Android Integration Tests'

  # Publish Android Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testResultsFormat: 'JUnit'
      mergeTestResults: true
    displayName: 'Publish Android Test Results'

- job: iOS_Testing
  pool:
    vmImage: 'macOS-latest'
  dependsOn: Android_Testing

  steps:
  - checkout: self
    displayName: 'Checkout Repository'

  # Install Flutter
  - script: |
      git clone https://github.com/flutter/flutter.git -b stable
      echo "##vso[task.prependpath]$PWD/flutter/bin"
    displayName: 'Install Flutter'

  # Install Flutter dependencies
  - script: |
      cd myflutterapp
      flutter pub get
    displayName: 'Install Dependencies'

  # Run Flutter Analyze
  - script: |
      cd myflutterapp
      flutter analyze
    displayName: 'Run Flutter Analyze'

  # Run Widget Tests
  - script: |
      cd myflutterapp
      flutter test test/ --machine > test-results.json
    displayName: 'Run Widget Tests'

  # Start iOS Simulator
  - script: |
      echo "Starting iOS Simulator..."
      xcrun simctl boot "iPhone 14"
      xcrun simctl list devices
    displayName: 'Start iOS Simulator'

  # Run iOS Integration Tests
  - script: |
      cd myflutterapp
      flutter test integration_test/ --machine > integration-test-results.json
    displayName: 'Run iOS Integration Tests'

  # Publish iOS Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testResultsFormat: 'JUnit'
      mergeTestResults: true
    displayName: 'Publish iOS Test Results'
